// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DegenToken is ERC20 {
    address public owner;

    mapping(address => bool) public redeemedItems;

    event TokensMinted(address indexed recipient, uint256 amount);
    event TokensTransferred(address indexed from, address indexed to, uint256 amount);
    event TokensRedeemed(address indexed player, uint256 amount);
    event TokensBurned(address indexed owner, uint256 amount);

    constructor(uint256 initialSupply) ERC20("Degen", "DGN") {
        owner = msg.sender;
        _mint(msg.sender, initialSupply);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }

    function mint(address account, uint256 amount) external onlyOwner {
        _mint(account, amount);
        emit TokensMinted(account, amount);
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        emit TokensTransferred(_msgSender(), recipient, amount);
        return true;
    }

    function redeemTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        require(!redeemedItems[msg.sender], "Item already redeemed");
        _burn(msg.sender, amount);
        redeemedItems[msg.sender] = true;
        emit TokensRedeemed(msg.sender, amount);
    }

    function checkBalance(address account) external view returns (uint256) {
        return balanceOf(account);
    }

    function burn(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _burn(msg.sender, amount);
        emit TokensBurned(msg.sender, amount);
    }

    function redeemedToken(address account) external view returns (bool) {
        return redeemedItems[account];
    }
}
